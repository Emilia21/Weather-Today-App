{"version":3,"sources":["components/WeatherBox/WeatherBox.module.css","components/SearchBar/SearchBar.jsx","components/WeatherBox/WeatherBox.jsx","api/index.js","App.js","index.js","components/SearchBar/SearchBar.module.css"],"names":["module","exports","SearchBar","props","useState","search","setSearch","className","styles","onChange","e","target","value","onKeyUp","key","defaultWeather","handleSearch","type","placeholder","WeatherBox","name","weather","description","main","temp_max","temp_min","Date","toDateString","api","getWeather","args","a","undefined","position","getPosition","then","response","catch","err","lat","coords","latitude","lon","longitude","params","fetchWeather","data","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","length","city","url","axios","get","kelvinToCelsius","Number","temp","Math","round","EPSILON","App","loading","setLoading","setName","setWeather","useEffect","alert","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.94d4e966.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"weather-box\":\"WeatherBox_weather-box__3kcPk\",\"show\":\"WeatherBox_show__uwM4G\",\"hide\":\"WeatherBox_hide__3WHnu\"};","import React, { useState, Fragment } from \"react\";\r\nimport styles from \"./SearchBar.module.css\";\r\n\r\nfunction SearchBar(props) {\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  const handleChange = (e) => {\r\n    setSearch(e.target.value);\r\n  };\r\n\r\n  const handleSearch = (e) => {\r\n    if (e.target.value === \"\") {\r\n      props.defaultWeather();\r\n    }\r\n    props.handleSearch(e.target.value);\r\n    setSearch(\"\");\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className={styles[\"search-box\"]}>\r\n        <input\r\n          onChange={handleChange}\r\n          onKeyUp={(e) => (e.key === \"Enter\" ? handleSearch(e) : null)}\r\n          type=\"text\"\r\n          className={styles[\"search-bar\"]}\r\n          placeholder=\"Search...\"\r\n          value={search}\r\n        />\r\n      </div>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default SearchBar;\r\n","import React, { Fragment } from \"react\";\r\nimport styles from \"./WeatherBox.module.css\";\r\n\r\nfunction WeatherBox({ name, weather }) {\r\n  const { description, main, temp_max, temp_min } = weather;\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"weather\">\r\n        <center className=\"show\">\r\n          <div className={styles[\"weather-box\"]}>\r\n            <h1>{name}</h1>\r\n            <h2>{new Date().toDateString()}</h2>\r\n            <h1>\r\n              {temp_min}ºC - {temp_max}ºC\r\n            </h1>\r\n            <h2>{main}</h2>\r\n            <h3>{description}</h3>\r\n          </div>\r\n          <small>Coded by Emilia Petkova &spades;</small>\r\n        </center>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default WeatherBox;\r\n","import axios from \"axios\";\r\n\r\n// used api: https://openweathermap.org/api\r\n\r\nconst api = {\r\n  base: \"https://api.openweathermap.org/data/2.5/weather?\",\r\n  key: \"ec6914d3e4b1d4402bbdcbf8901c3993\",\r\n};\r\n\r\n\r\nexport const getWeather = async (args) => {\r\n  let params;\r\n  // if search filled is empty \r\n  if (args === undefined) {\r\n    let position = {};\r\n    await getPosition()\r\n      .then((response) => {\r\n        position = response;\r\n      })\r\n      .catch((err) => {\r\n        return \"error\";\r\n      });\r\n\r\n    let lat = position.coords.latitude;\r\n    let lon = position.coords.longitude;\r\n    params = [lat, lon];\r\n  } else {\r\n    let city = args;\r\n    params = [city];\r\n  }\r\n  let data = await fetchWeather(params);\r\n  return data;\r\n};\r\n\r\n// get users location\r\nconst getPosition = function () {\r\n  return new Promise(function (resolve, reject) {\r\n    navigator.geolocation.getCurrentPosition(resolve, reject);\r\n  });\r\n};\r\n\r\nconst fetchWeather = async (args) => {\r\n  let url;\r\n  switch (args.length) {\r\n    // fetch by city name\r\n    case 1:\r\n      let city = args[0];\r\n      url = `${api.base}q=${city}&appid=${api.key}`;\r\n      break;\r\n    // fetch by latitude and longitude\r\n    case 2:\r\n      let lat, lon;\r\n      [lat, lon] = args;\r\n      url = `${api.base}lat=${lat}&lon=${lon}&appid=${api.key}`;\r\n      break;\r\n  }\r\n  try {\r\n    const {\r\n      data: {\r\n        main: { temp_max, temp_min },\r\n        name,\r\n        weather,\r\n      },\r\n    } = await axios.get(url);\r\n    return {\r\n      name,\r\n      weather: {\r\n        temp_max: kelvinToCelsius(Number(temp_max)),\r\n        temp_min: kelvinToCelsius(Number(temp_min)),\r\n        main: weather[0].main,\r\n        description: weather[0].description,\r\n      },\r\n    };\r\n  } catch (error) {\r\n    return \"error\";\r\n  }\r\n};\r\n\r\nconst kelvinToCelsius = (temp) => {\r\n  temp = temp - 273.15;\r\n  return Math.round((temp + Number.EPSILON) * 100) / 100;\r\n};\r\n","import React, { useState, useEffect, Fragment } from \"react\";\r\nimport { SearchBar, WeatherBox } from \"./components\";\r\nimport \"./index.css\";\r\nimport { getWeather } from \"./api/index\";\r\n\r\nfunction App() {\r\n  const [loading, setLoading] = useState(true);\r\n  const [name, setName] = useState(\"\");\r\n  const [weather, setWeather] = useState({});\r\n\r\n  useEffect(async () => {\r\n    defaultWeather();\r\n  }, []);\r\n\r\n  const defaultWeather = async () => {\r\n    let data = await getWeather();\r\n    if (data !== \"error\") {\r\n      const { name, weather } = data;\r\n      setName(name);\r\n      setWeather(weather);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSearch = async (city) => {\r\n    let data = await getWeather(city);\r\n    if (data != \"error\") {\r\n      const { name, weather } = data;\r\n      setName(name);\r\n      setWeather(weather);\r\n      setLoading(false);\r\n    } else {\r\n      alert(\"Sorry, this city wasn't found. Try again.\");\r\n      defaultWeather();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"app\">\r\n        <main>\r\n          <SearchBar\r\n            handleSearch={handleSearch}\r\n            defaultWeather={defaultWeather}\r\n          />\r\n          {/* TODO: add spinner while loading */}\r\n          {loading ? null : <WeatherBox name={name} weather={weather} />}\r\n        </main>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"search-box\":\"SearchBar_search-box__ypHrs\",\"search-bar\":\"SearchBar_search-bar__1OlkI\"};"],"sourceRoot":""}